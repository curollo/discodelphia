#!/usr/bin/env python3
import socket, json, threading, requests, time

def build_discord_url(content): return f"https://discord.com/api/{content}"
def build_webhook_url(id, token): return build_discord_url(f"webhooks/{id}/{token}")
def get_auth_header(token): return {"Authorization": f"Bot {token}"}

class Disco: # channel

    def __init__(self, token, channel_id, relay):
        self.token = token
        self.channel_id = channel_id
        self.relay = relay
        self.webhooks = {}
        threading.Thread(target=self.attend).start()

    def attend(self):
        while 1:
            r = requests.get(
                build_discord_url(f"channels/{self.channel_id}/messages"),
                headers=get_auth_header(self.token)
            )

            if r.status_code < 200 or r.status_code >= 300:
                raise Exception(f"Error {r.status_code}: {r.content}")

            messages = json.loads(r.content)
            print(messages) # debug

    def push_contents(self, name, msg):
        if name not in self.webhooks:
            self.get_webhook(name)
        r = requests.post(
            self.webhooks[name],
            data={"content": msg, "username": name}
        )

        if r.status_code < 200 or r.status_code >= 300:
            raise Exception(f"Error {r.status_code}: {r.content}")


    def get_webhook(self, name):
        r = requests.get(
            build_discord_url(f"channels/{self.channel_id}/webhooks"),
            headers=get_auth_header(self.token)
        )

        if r.status_code < 200 or r.status_code >= 300:
            raise Exception(f"Error {r.status_code}: {r.content}")

        webhooks = json.loads(r.content)
        for webhook in webhooks:
            if webhook["name"] == name:
                self.webhooks[name] = build_webhook_url(webhook["id"], webhook["token"])
                return

        # create a new webhook if none exists
        r = requests.post(
            build_discord_url(f"channels/{self.channel_id}/webhooks"),
            headers=get_auth_header(self.token),
            data=json.dumps({"name": name})
        )

        if r.status_code < 200 or r.status_code >= 300:
            raise Exception(f"Error {r.status_code}: {r.content}")

        webhook = json.loads(r.content)
        self.webhooks[name] = build_webhook_url(webhook["id"], webhook["token"])
