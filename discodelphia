import socket, json, threading, requests, configparser, time

class Puppeteer:

    def __init__(self, ip, port, channel, relay):
        self.ip = ip
        self.port = port
        self.channel = channel
        self.relay = relay
        self.users = {}
        self.puppet = self.add_puppeteer()

    def send(self, socket, message):
        socket.send(bytes(message, "utf-8"))
        time.sleep(0.2)

    def add_puppeteer(self, nick='puppet'):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.ip, self.port))
        self.send(s, ("NICK %s\n" % nick))
        self.send(s, ("USER %s 0 * :%s\n" % (nick, nick)))
        self.send(s, ("JOIN %s\n" % self.channel))

        threading.Thread(target=self.attend, args=(nick, s)).start()
        return s

    def push(self, nick, msg):
        if int(msg["type"]) != 0: # plaintext only
            print("illegal message type: %s, ignoring" % msg["type"])
            return

        nick = msg["author"]["username"]
        if nick not in self.users: self.users[nick] = self.add_puppeteer(nick)

        content = msg["content"]
        if "message_reference" in msg:
            content = msg["referenced_message"]["author"]["username"] + ": " + content
            print(content) # debug

        self.send(self.users[nick], ("PRIVMSG %s :%s\n" % (self.channel, content)))

    def attend(self, user, socket):
        while 1:
            buff = socket.recv(1024)
            print(buff) #debug
            if not buff:
                socket.close()
                print("can't connect")
                return

            msg = buff.decode("utf-8").split(' ')
            sender = msg[0].split('!')[0][1:]

            if msg[0] == "PING":
                self.send(socket, ("PONG %s\n" % msg[1]) )
                continue
            if msg[1] == "PRIVMSG" and sender not in self.users:
                if msg[2] == self.channel and user == "puppet":
                    parsed_msg = " ".join(msg[3:])[1:-2] # parse channel msg
                    self.relay.push(self.channel, sender, parsed_msg)
                    continue

class Disco:

    def __init__(self, token, channel_id, relay):
        self.token = token
        self.channel_id = channel_id
        self.relay = relay
        self.webhooks = {}
        self.polling = 10
        threading.Thread(target=self.attend).start()

    def build_url(self, content): return f"https://discord.com/api/{content}"
    def build_webhook_url(self, id, token): return self.build_url(f"webhooks/{id}/{token}")
    def get_auth_header(self, token): return {"Authorization": f"Bot {token}"}

    def attend(self):
        while 1:
            r = requests.get(
                    self.build_url(f"channels/{self.channel_id}/messages"),
                    headers=self.get_auth_header(self.token),
                    params=None)
            if not 200 <= r.status_code < 300: raise Exception(f"Error {r.status_code}: {r.content}")

            messages = json.loads(r.content)
            if messages:
                self.lm_id = messages[0]["id"]
                for message in reversed(messages):
                    if "webhook_id" not in message: self.relay.push(self.channel_id, None, message)
            time.sleep(self.refresh) # TODO:add custom refresh rate in config

    def push(self, name, msg):
        if name not in self.webhooks: self.get_webhook(name)
        r = requests.post(
                self.webhooks[name],
                data={"content": msg, "username": name})
        if not 200 <= r.status_code < 300: raise Exception(f"Error {r.status_code}: {r.content}")

    def get_webhook(self, name):
        r = requests.get(
                self.build_url(f"channels/{self.channel_id}/webhooks"),
                headers=self.get_auth_header(self.token))
        if not 200 <= r.status_code < 300: raise Exception(f"Error {r.status_code}: {r.content}")

        webhooks = json.loads(r.content)
        for webhook in webhooks:
            if webhook["name"] == name:
                self.webhooks[name] = self.build_webhook_url(webhook["id"], webhook["token"])
                return
        r = requests.post(
                self.build_url(f"channels/{self.channel_id}/webhooks"),
                headers=self.get_auth_header(self.token),
                data=json.dumps({"name": name}))
        if not 200 <= r.status_code < 300: raise Exception(f"Error {r.status_code}: {r.content}")

        webhook = json.loads(r.content)
        self.webhooks[name] = self.build_webhook_url(webhook["id"], webhook["token"])

class RelaySetup:

    def __init__(self, cfg):
        self.cfg = configparser.ConfigParser()
        self.cfg.read(cfg_file)
        self.map_channel = {}

    def load(self):
        disco_channel = self.cfg["CHANNELS"]["DISCO"]
        irc_channel = self.cfg["CHANNELS"]["IRC"]

        self.map_channel[irc_channel] = Disco(self.cfg["DEFAULT"]["TOKEN"], disco_channel, self)
        self.map_channel[disco_channel] = Puppeteer(self.cfg["DEFAULT"]["SERVER"], int(self.cfg["DEFAULT"]["PORT"]), irc_channel, self)
        print('connection established')

    def push(self, channel, name, msg):
        if channel in self.map_channel:
            self.map_channel[channel].push(name, msg)

if __name__ == "__main__":
    cfg_file = "config.ini"
    start_disco = RelaySetup(cfg_file) # create relay
    start_disco.load() # load channel mapping
